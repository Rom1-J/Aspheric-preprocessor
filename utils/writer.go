package utils

import (
	"encoding/csv"
	"os"
	"sync"
)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type CsvWriter struct {
	mutex     *sync.Mutex
	csvWriter *csv.Writer
	file      *os.File
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func ParallelCsvWriter(fileName string) (*CsvWriter, error) {
	if fileName != "" {
		csvFile, err := os.Create(fileName)
		if err != nil {
			return nil, err
		}
		w := csv.NewWriter(csvFile)
		return &CsvWriter{csvWriter: w, mutex: &sync.Mutex{}, file: csvFile}, nil
	}

	w := csv.NewWriter(os.Stdout)
	return &CsvWriter{csvWriter: w, mutex: &sync.Mutex{}, file: nil}, nil
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func (w *CsvWriter) Write(row []string) {
	w.mutex.Lock()
	err := w.csvWriter.Write(row)
	if err != nil {
		return
	}
	w.mutex.Unlock()
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func (w *CsvWriter) Flush() {
	w.mutex.Lock()
	w.csvWriter.Flush()
	w.mutex.Unlock()
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func (w *CsvWriter) Close() error {
	w.mutex.Lock()
	defer w.mutex.Unlock()

	w.csvWriter.Flush()

	if err := w.csvWriter.Error(); err != nil {
		return err
	}

	if w.file != nil {
		if err := w.file.Close(); err != nil {
			return err
		}
	}

	return nil
}
